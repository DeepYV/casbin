// package main

// import (
// 	"fmt"
// )

// type node struct {
// 	value int
// 	next  *node
// }
// type linklist struct {
// 	head *node
// 	len  int
// }

// func (l *linklist) Insert(val int) {
// 	n := node{}
// 	n.value = val
// 	if l.len == 0 {
// 		l.head = &n
// 		l.len++
// 		return
// 	}
// 	ptr := l.head
// 	for i := 0; i < l.len; i++ {
// 		if ptr.next == nil {
// 			ptr.next = &n
// 			l.len++
// 			return
// 		}
// 		ptr = ptr.next
// 	}
// }

// func (l *linklist) del() {

// 	ptr := l.head

// 	for i := 0; i < l.len; i++ {

// 		if ptr.next.next == nil {

// 			ptr = ptr.next
// 			ptr.next= nil

// 			return

// 		}
// 		ptr = ptr.next
// 	}

// }
// func (l *linklist) Print() {
// 	if l.len == 0 {
// 		fmt.Println("No nodes in list")
// 	}
// 	ptr := l.head
// 	for ptr.next != nil {
// 		fmt.Println("Node: ", ptr.value)
// 		ptr = ptr.next
// 	}
// }
// func main() {

// 	test := linklist{}
// 	test.Insert(5)
// 	test.Insert(15)
// 	test.Insert(52)

// 	test.Insert(225)
// 	test.Insert(523)
// 	test.Insert(15)
// 	test.Insert(5450)
// 	test.Insert(540)
// 	test.Print()
// 	test.del()
// 	fmt.Print("print \n")
// 	test.Print()
// 	test.del()
// 	fmt.Print("print \n")
// 	test.Print()
// 	test.del()
// 	test.Print()
// 	test.del()
// 	fmt.Print("print \n")
// 	test.Print()
// 	test.del()
// 	fmt.Print("print \n")
// 	test.Print()

// }

package main

import (
	"fmt"
	"reflect"
)

// func httpClient() *http.Client {
// 	client := &http.Client{Timeout: 10 * time.Second}
// 	return client
// }

// func sendRequest(client *http.Client, method string) []byte {
// 	endpoint := "https://httpbin.org/post"
// 	values := map[string]string{"foo": "baz"}
// 	jsonData, err := json.Marshal(values)

// 	req, err := http.NewRequest(method, endpoint, bytes.NewBuffer(jsonData))
// 	if err != nil {
// 		log.Fatalf("Error Occurred. %+v", err)
// 	}

// 	response, err := client.Do(req)
// 	if err != nil {
// 		log.Fatalf("Error sending request to API endpoint. %+v", err)
// 	}

// 	// Close the connection to reuse it
// 	defer response.Body.Close()

// 	body, err := ioutil.ReadAll(response.Body)
// 	if err != nil {
// 		log.Fatalf("Couldn't parse response body. %+v", err)
// 	}

// 	return body
// }

// func main() {
// 	// c should be re-used for further calls
// 	c := httpClient()
// 	response := sendRequest(c, http.MethodPost)
// 	log.Println("Response Body:", string(response))
// }
func main() {

	mk := make(map[rune]int)
	mk1 := make(map[rune]int)
	var input, input1 string
	fmt.Scanf("%s%s", &input, &input1)
	for _, j := range input {
		if()

		mk[j]++

	}
	for _, j := range input1 {

		mk1[j]++

	}
	if reflect.DeepEqual(mk, mk1) {
		fmt.Println("yes")
	}

}
